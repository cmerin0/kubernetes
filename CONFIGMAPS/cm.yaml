apiVersion: v1
kind: ConfigMap
metadata:
  name: my-app-config
data:
  # Key-value pairs of configuration data
  database.host: "production-db.mycompany.com"
  api.url: "https://api.mycompany.com/v1"
  log.level: "warn"
  # You can also use this for multi-line values
  server.properties: |
    server.port=8080
    server.timeout=30s

---
# A ConfigMap for a log-level configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: log-config
data:
  fluentd.conf: |
    # This is a complex, multi-line Fluentd configuration
    <source>
      @type tail
      path /var/log/app.log
      pos_file /var/log/fluentd-pos.log
      tag my-app
    </source>

    <match my-app>
      @type stdout
    </match>

---
# A ConfigMap for feature flags
apiVersion: v1
kind: ConfigMap
metadata:
  name: feature-flags
data:
  new-user-onboarding-enabled: "true"
  beta-feature-search: "false"
  promo-banner-active: "true"

---
# A ConfigMap for a multi-file configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: multi-file-config
data:
  app-config.json: |
    {
      "name": "my-app",
      "version": "1.0",
      "settings": {
        "theme": "dark",
        "language": "en-US"
      }
    }
  log4j.properties: |
    log4j.rootLogger=INFO, stdout
    log4j.appender.stdout=org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
